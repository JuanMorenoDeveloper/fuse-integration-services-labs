apiVersion: v1
kind: Template
labels:
  template: xpaas-jenkins-persistent
  group: xpaas
metadata:
  annotations:
    description: Creates a Jenkins server for the xpaas labs
    tags: instant-app,jenkins,xpaas
  name: xpaas-jenkins-persistent
parameters:
- description: Jenkins service name
  name: APPLICATION_NAME
  value: jenkins
- description: Volume space available for data, e.g. 512Mi, 2Gi
  name: VOLUME_CAPACITY
  required: true
  value: 512Mi
- description: Password for the Jenkins 'admin' user.
  name: JENKINS_PASSWORD
  generate: expression
  value: password
- description: Maximum amount of memory the container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  value: 1Gi
- description: Jenkins configuration repository
  name: JENKINS_CONFIGURATION_REPOSITORY
  required: true
- description: The directory in the Jenkins configuration repository which has the configuration for the Jenkins master image.
  name: JENKINS_MASTER_CONFIGURATION_CONTEXT
  required: true
- description: The directory in the Jenkins configuration repository which has the configuration for the Jenkins slave image.
  name: JENKINS_SLAVE_CONFIGURATION_CONTEXT
  required: true
objects:
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    name: default_edit
  roleRef:
    name: edit
  subjects:
  - kind: ServiceAccount
    name: default
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${APPLICATION_NAME}-pvc
    labels:
      app: ${APPLICATION_NAME}
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY}
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME}
  spec:
    tags:
    - annotations:
        description: Provides a Jenkins server
        tags: jenkins
        version: 1.x
      from:
        kind: DockerImage
        name: registry.access.redhat.com/openshift3/jenkins-1-rhel7:latest
      importPolicy: {}
      name: "1"
    - annotations:
        description: Provides a Jenkins server
        tags: jenkins
      from:
        kind: ImageStreamTag
        name: "1"
      importPolicy: {}
      name: latest
#Jenkins master
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-master
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-master
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APPLICATION_NAME}-master:latest
    resources:
      limits:
        memory: 1Gi
    source:
      contextDir: ${JENKINS_MASTER_CONFIGURATION_CONTEXT}
      git:
        uri: ${JENKINS_CONFIGURATION_REPOSITORY}
        ref: master
      secrets: []
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      type: Source
    triggers:
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
  status: {}
# Jenkins Slave
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      slave-directory: /var/lib/jenkins
      slave-label: jdk8
    labels:
      role: jenkins-slave
      app: ${APPLICATION_NAME}
    name: jdk-jenkins-slave
  spec: {}
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      description: Builds Jenkins slave image with JDK
    labels:
      name: jdk-slave
      app: ${APPLICATION_NAME}
    name: jdk-jenkins-slave
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: jdk-jenkins-slave:latest
    source:
      contextDir: ${JENKINS_SLAVE_CONFIGURATION_CONTEXT}
      git:
        uri: ${JENKINS_CONFIGURATION_REPOSITORY}
        ref: master
      type: Git
    strategy:
      dockerStrategy:
        from:
          kind: DockerImage
          name: centos:7
      type: Docker
    triggers:
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    portalIP: ""
    ports:
    - name: web
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: jnlp
      port: 50000
      protocol: TCP
      targetPort: 50000      
    selector:
      name: ${APPLICATION_NAME}
      deploymentconfig: ${APPLICATION_NAME}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    port:
      targetPort: 8080
    to:
      kind: Service
      name: ${APPLICATION_NAME}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME}
  spec:
    replicas: 1
    selector:
      name: ${APPLICATION_NAME}
      deploymentconfig: ${APPLICATION_NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: ${APPLICATION_NAME}
          deploymentconfig: ${APPLICATION_NAME}
      spec:
        containers:
        - capabilities: {}
          env:
          - name: JENKINS_PASSWORD
            value: ${JENKINS_PASSWORD}
          image: ' '
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /login
              port: 8080
            initialDelaySeconds: 120
            timeoutSeconds: 3
          name: jenkins
          readinessProbe:
            httpGet:
              path: /login
              port: 8080
            initialDelaySeconds: 3
            timeoutSeconds: 3
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/jenkins
            name: ${APPLICATION_NAME}-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - name: ${APPLICATION_NAME}-data
          persistentVolumeClaim:
            claimName: ${APPLICATION_NAME}-pvc
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}-master:latest 
      type: ImageChange
    - type: ConfigChange